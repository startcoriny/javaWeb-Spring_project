<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- !DOCTYPE mapper ...으로 시작하여 MyBatis 매퍼 파일의 DTD를 지정 -->

<mapper namespace="mapper.member">
	<!-- mapper 요소는 MyBatis 매퍼 파일의 루트 요소 -->
	<!-- member.xml의 네임스페이스를 지정 -->

	<!-- 네임스페이스(Namespace) - XML 문서에서 요소와 속성의 고유한 식별자를 정의하는 메커니즘 - 요소와 속성의 충돌을 
		방지하고, 동일한 이름을 가진 요소와 속성을 구별 - XML에서 네임스페이스는 보통 URL 형식으로 표현 -->



	<resultMap id="memResult" type="memberVO"> 
	   <!--  resultMap 요소는 SQL문 실행 결과를 매핑하기 위한 설정을 정의  -->
	    <!-- SQL문을 실행한 후 반환되는 레코드들을 typeAlias태그에서 지정한 memberVO빈에 저장 --> 
	    <!-- id 속성으로 고유 식별자를 지정하고, type 속성으로 매핑할 객체의 타입을 지정  -->
		
		<result property="id" column="id" /> 
		<!-- "property" 속성은 매핑할 객체의 속성 이름을 지정  -->
		<!-- "column" 속성은 해당 컬럼 이름을 지정 -->
		 <!-- MemberVO 클래스의 id 속성과 데이터베이스 테이블의 id 컬럼을 매핑하는 설정 --> 
		<result property="pwd" column="pwd" /> 
		<result property="name" column="name" /> 
		<result property="email" column="email" /> 
		<result property="joinDate" column="joinDate" /> 
		
		<!-- result 요소는 컬럼과 객체의 속성을 매핑 레코드의 컬럼 이름에 대해 memberVO의 같은 속성에 값을 설정  -->
	</resultMap>


	<!-- <resultMap id="memResult" type="java.util.HashMap">
		조회한 레코드를 지정한 컬럼이름을 KEY, 값을 value로 저장
		<result property="id" column="id" />
		<result property="pwd" column="pwd" />
		<result property="name" column="name" />
		<result property="email" column="email" />
		<result property="joinDate" column="joinDate" />
	</resultMap> -->



	<select id="selectAllMemberList" resultMap="memResult">
		<!-- <select> 태그는 데이터베이스에서 데이터를 조회하기 위해 사용되는 MyBatis의 태그 -->
		<!-- select 요소는 SQL 쿼리를 실행하는 매핑 구문 -->
		<!-- id 속성으로 고유 식별자를 지정하고, resultMap 속성으로 결과를 매핑할 resultMap의 ID를 지정 -->
		<!-- DAO에서 id를 이용해 ㅐ해당 SQL문을 호출하고 반환되는 레코드를 memResult에 저장. -->
		<!-- ID는 매퍼 파일 내에서 해당 쿼리를 참조하고 실행할 때 사용 -->
		<!-- selectAllMemberList SQL 쿼리는 memResult라는 resultMap 설정을 참조하여 실행된 결과를 
			매핑 -->
      <![CDATA[
         select * from t_member	order by joinDate desc	 	
      ]]>
		<!-- CDATA ... 섹션 내부에는 SQL 쿼리가 작성 -->

	</select>



	<select id="selectName" resultType="String">
		<!-- MemberDAO에서 접근시 사용할 SQL문의 id를 지정 -->
		<!-- resultType 속성을 문자열로 지정해 SQL문으로 조회한 이름(문자열)을 호출한 메서드로 반환 -->
    <![CDATA[
	select name from t_member
	where id = 'hong'			
    ]]>
	</select>



	<select id="selectPwd" resultType="int">
		<!-- MemberDAO에 접근시 사용할 sql문의 id를 지정 -->
		<!-- resultType 속성을 int로 지정해 SQL문으로 조회한 정수를 호출한 메서드로 반환 -->
	  <![CDATA[ 
	    select pwd from t_member 
	    where id = 'hong'
	 ]]>
	</select>



	<select id="selectMemberById" resultType="memberVO" parameterType="String">
		<!-- MemberDAO에서 호출하는 id를 지정 -->
		<!-- 조회되는 한 개의 레코드를 memberVO에 저장 -->
      <![CDATA[
         select * from t_member
         where
         id=#{id}			
      ]]>
		<!-- MemberDAO에서 메서드를 호출하면서 parameterType으로 전달된 매개변수 이름을 select문의 id의 조건 
			값으로 사용 -->
	</select>



	<select id="selectMemberByPwd" resultMap="memResult" parameterType="String">
	<!-- 저장된 pwd가 String 임으로 int가 아닌 String으로 타입을 지정해주어야함. -->
      <![CDATA[
         select * from t_member
         where
         pwd=#{pwd}			
      ]]>
		<!-- sql문 실행 시 매개변수 이름을 pwd의 조건값으로 사용 -->
	</select>
	
	<select id="selectMemberByname" resultMap="memResult" parameterType="String">
      <![CDATA[
         select * from t_member
         where
         name=#{name}			
      ]]>
	</select>
	
	<select id="selectMemberByemail" resultMap="memResult" parameterType="String">
      <![CDATA[
         select * from t_member
         where
         email=#{email}			
      ]]>
	</select>


<!-- 아이디 추가 -->
    <insert id="insertMember"  parameterType="memberVO">
    <!-- SQL 문장에 전달되는 매개변수가 memberVO라는 타입을 갖는 객체 -->
    
		<![CDATA[
		 insert into t_member(id,pwd, name, email)
		 values(#{id}, #{pwd}, #{name}, #{email})
		]]>      
	</insert>
	
	
	<!-- HashMap을 이용한 회원 추가 -->
	<insert id="insertMember2"  parameterType="java.util.Map">
	<!-- MemberDAO에서 회원 정보를 HashMap에 담아서 전달 -->
		<![CDATA[
			 insert into t_member(id,pwd, name, email)
			 values(#{id}, #{pwd}, #{name}, #{email})
		]]>
		<!-- HashMap에 각각의 key로 저장된 value를 가져와 테이블에 추가함. -->      
   </insert>
   
   
   
   <update id="updateMember"  parameterType="memberVO">
   <!-- SQL문에 사용될 데이터를 memberVO빈에 설정해 전달. -->
     <![CDATA[
	     update t_member
	     set pwd=#{pwd}, name=#{name}, email=#{email}
	     where
	     id=#{id}
      ]]>      
      <!-- memberVO빈의 id속성값을 조건 값으로 사용하여
      		memberVO빈의 속성값을 각 컬럼의 수정 값으로 설정 -->
   </update> 
     
     
     
   <delete id="deleteMember"  parameterType="String">
   <!-- 회원 아이디는 문자열이기 때문에 parameterType을 String으로 설정 -->
	<![CDATA[
	   delete from  t_member
	   where
	   id=#{id}
	]]>      
	<!-- 전달된 id를 조건 값으로 해당 회원 정보를 삭제 -->
  </delete>
	
	
	
	<!-- 동적 SQL문 -->
  <select id="searchMembers" parameterType="memberVO" resultMap="memResult">
      <![CDATA[
          select * from t_member
      ]]>
      <!-- 공통 sql문 -->
      
      <where>
         <if test=" name != ''  and  name != null">
            name=#{name}
         </if>
         <!-- name속성값을 체크해 공백이 아니거나 null이 아니면 name=name속성값
         		조건절을 공통 SQL문 뒤에 추가 -->
         
         <if test="email != ''  and email != null ">
           and email = #{email}
         </if>
         <!-- email속성값을 체크해 공백이 아니거나 null이 아니면 email=email속성값
         		조건절을 공통 SQL문 뒤에 추가 -->
         
      </where>
      order by joinDate desc
  </select>
  
  
  
 <!--  
   <sql id="a">
    <![CDATA[
      select * from t_member
     ]]> 
   </sql>  -->  
  
  
  

  <select id="searchMember" parameterType="memberVO" resultMap="memResult">
  <!-- SQL문 id를 searchMember로 지정 -->
	     <!-- <include refid="a" />  -->
	   <![CDATA[
         select * from t_member 
      ]]>
	  
       <where>
		  <choose>
		      <when test="name != '' and name != null and  email != '' and email != null">
			     name=#{name} and email=#{email}
		      </when>
		      <!-- name과 email 속성 값이 모두 있는 경우 'name=name속성값 and email=email 속성 값'조건식을 where절에 추가 -->
		      
		      <when test="name != '' and name != null">
			     name = #{name}
		      </when>
		      <!-- name속성값만 있는 경우 -->
		      
		      <when test="email !='' and email != null">
			    email = #{email}
		      </when>
		      <!-- email속성값만 있는 경우 -->
	      </choose>
       </where>
       order by joinDate desc
   </select> 
   
   
   
   <select id="foreachSelect" resultMap="memResult" parameterType="java.util.Map">
   <!-- SQL문에 List 인스턴스나 배열을 전달하면 자동으로 Map에 전달되어 이름을 키(key)로 사용
   		List 인스턴스는 list를 키로 사용하고 배열을 array를 키로 사용 -->
      <!-- <include refid="a" /> -->
      <![CDATA[
        select * from t_member 
          
      ]]>
      
      where name in
      <foreach item="item" collection="list" open="(" separator="," close=")" >
         #{item}
      </foreach>
      <!-- foreach문을 이요해 반복해서 list값을 표시 -->
      order by joinDate desc
   </select>
   
   
   
   <insert id="foreachInsert"  parameterType="java.util.Map">
      <foreach item="item"  collection="list"   open="INSERT ALL" separator=" " close="SELECT * FROM DUAL" >
      	<!-- foreach로 반복작업을 할 떄는 처음에 insert all을 추가함. -->
      	<!-- foreach로 반복 작업이 끝난 후 select*from dual을 마지막에 추가함 -->
          INTO  t_member(id, pwd, name, email)
          <!-- foreach 태그안에 위치해야함 -->
          VALUES  (#{item.id},
                    #{item.pwd},
                    #{item.name},
                    #{item.email})
      </foreach>
   </insert>
   
   
   
   <!-- 이러면 오류
    <select id="selectLike" resultMap="memResult"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         name like '%'#{name}'%'		
      ]]>
    </select>
     -->
     
     
     
   <!--  like 검색 -->
   <select id="selectLike" resultMap="memResult"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         name like '%' || #{name} || '%'		
      ]]>
      
      <!-- #{name} 앞에는 '%' ||를 붙이고
				뒤에도 || ‘%’를 붙인다. -->
				
    </select>
    
   <select id="selectallLike" resultMap="memResult"  parameterType="String" >
      <![CDATA[
         select * from t_member
         where
         id like '%' || #{name} || '%' or pwd like '%' || #{name} || '%' or email like '%' || #{name} || '%' or name like '%' || #{name} ||'%'
      ]]>
      
      <!-- #{name} 앞에는 '%' ||를 붙이고
				뒤에도 || ‘%’를 붙인다. -->
				
    </select>


</mapper>