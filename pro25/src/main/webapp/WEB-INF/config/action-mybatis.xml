<?xml version="1.0" encoding="UTF-8"?>
<beans
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans">

	<bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
<!-- PropertyPlaceholderConfigurer 클래스를 이용해 데이터베이스 설정 관련 정보를 jdbc.properties
		파일에서 읽어 들임-->
		<property name="locations">

			<value>/WEB-INF/config/jdbc.properties</value>

		</property>

	</bean>

	<bean id="dataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
	<!-- 마이바티스에서 제공하는 PooledDataSource 클래스를 이용해 dataSource빈을 생성 -->	
		<property name="driver" value="${jdbc.driverClassName}" />
		
		<property name="url" value="${jdbc.url}" />
		
		<property name="username" value="${jdbc.username}" />
		
		<property name="password" value="${jdbc.password}" />
	
	</bean>


	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<!-- SqlSessionFactoryBean클래스를 이용해 dataSource속성에 dataSource빈을 설정 -->
		
		<property name="dataSource" ref="dataSource" />

		
		<property name="mapperLocations" value="classpath:mybatis/mappers/*.xml" />
		<!-- mapperLocations 속성에 mybatis/mappers 패키지의 모든 매퍼 파일들을 읽어 들여와 설정 -->
	
	</bean>


	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	<!-- SqlSessionTemplate클래스를 이용해 sqlSession빈을 생성 -->
	<!--  MyBatis와 Spring을 연결하는 역할 -->
	<!-- SqlSessionFactory를 생성자 인자로 받아 MyBatis의 SqlSession을 래핑하여 Spring의 트랜잭션 관리와 예외 처리를 지원 -->
	
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	<!-- constructor-arg 요소를 사용하여 생성자 인자를 설정 -->
	<!-- index="0"은 첫 번째 생성자 인자를 의미 -->
	<!-- ref="sqlSessionFactory"는 "sqlSessionFactory"라는 식별자를 가진 다른 빈을 참조하여 해당 인스턴스의 생성자에 전달 -->
	
	</bean>


	<bean id="accDAO" class="com.spring.account.AccountDAO">
    	<property name="sqlSession" ref="sqlSession" />
	</bean>
    
    
    
	<bean id="txManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<!-- DataSourceTransactionManager클래스를 이용해 dataSource빈에 트랜잭션을 적용 -->
	<!-- JDBC를 이용한 데이터베이스 작업에서 트랜잭션 관리를 지원 -->
	<!--  데이터베이스 연결에 사용되는 DataSource를 기반으로 트랜잭션을 관리 -->
	<!-- DataSource는 데이터베이스 연결과 관련된 설정을 포함하고 있으며, 
		트랜잭션 매니저는 이를 활용하여 트랜잭션을 시작하고 커밋 또는 롤백하는 등의 작업을 수행 -->
	    
	    
	    
	       <property name="dataSource" ref="dataSource" />
    </bean>
     
   <tx:annotation-driven transaction-manager="txManager" /> 
   <!-- 애너테이션을 사용하여 트랜잭션을 적용하기 위해 txManager빈을 설정 -->
   <!-- Spring Framework에서 제공하는 XML 태그로, 애노테이션을 사용하여 트랜잭션을 관리하기 위한 설정을 지정 -->
   <!-- transaction-manager 속성은 트랜잭션 매니저를 지정하는 데 사용 -->
   <!-- @Transactional 애노테이션을 메서드나 클래스에 적용하여 트랜잭션을 관리 -->
   <!-- transaction-manager 속성은 트랜잭션 매니저 빈의 이름을 지정 -->
   <!-- 해당 이름은 Spring 컨테이너에 등록된 트랜잭션 매니저 빈의 이름과 일치 -->
   <!-- 코드에서 명시적으로 트랜잭션을 시작하거나 커밋/롤백하는 작업을 하지 않아도, 애노테이션을 통해 트랜잭션 처리가 자동으로 이루어집 -->
   
</beans>